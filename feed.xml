<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://daniel-gomm.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://daniel-gomm.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-29T08:08:30+00:00</updated><id>https://daniel-gomm.github.io/feed.xml</id><title type="html">blank</title><subtitle>Personal website of Daniel Gomm. </subtitle><entry><title type="html">A Practical Guide to the OpenAI Batch API with Python and openbatch</title><link href="https://daniel-gomm.github.io/blog/2025/openbatch/" rel="alternate" type="text/html" title="A Practical Guide to the OpenAI Batch API with Python and openbatch"/><published>2025-09-29T00:00:00+00:00</published><updated>2025-09-29T00:00:00+00:00</updated><id>https://daniel-gomm.github.io/blog/2025/openbatch</id><content type="html" xml:base="https://daniel-gomm.github.io/blog/2025/openbatch/"><![CDATA[<blockquote> <p>TL;DR The OpenAI Batch API offers a <strong>50% cost reduction</strong> and significantly higher throughput for large-scale tasks, but its file-based workflow is cumbersome, especially for structured outputs. The <a href="https://daniel-gomm.github.io/openbatch"><code class="language-plaintext highlighter-rouge">openbatch</code></a> Python library eliminates this friction by providing a convenient, <strong>drop-in replacement for the standard OpenAI client</strong>. It simplifies batch file creation, streamlines structured data handling using Pydantic, and offers powerful templating, making the cost and speed benefits of batch processing easily accessible without sacrificing developer convenience.</p> </blockquote> <p>For researchers and developers working with large datasets, the <a href="https://platform.openai.com/docs/guides/batch/batch-api">OpenAI Batch API</a> offers significant advantages in cost and speed. However, its asynchronous, file-based workflow can feel cumbersome compared to the simplicity of direct API calls. This guide explores the trade-offs and introduces <a href="https://daniel-gomm.github.io/openbatch">openbatch</a>, a Python package designed to make the Batch API as convenient to use as the standard sequential API.</p> <h2 id="batch-processing-is-cheaper-and-often-faster">Batch Processing is Cheaper and often Faster</h2> <p>The primary motivation for using the Batch API is efficiency. It provides two key benefits:</p> <ol> <li><strong>50% Cost Reduction</strong>: Batch API calls are priced at <strong>half the cost</strong> of the standard API. For large-scale data analysis, classification, or generation tasks, this immediately doubles your budget’s effectiveness.</li> <li><strong>High Throughput</strong>: While batch jobs have a 24-hour completion window, they often finish much faster than an equivalent number of sequential calls. In one experiment, a task that would have taken over <strong>10 hours of sequential API calls</strong> was <strong>completed in under 1 hour</strong> using a single batch job.</li> </ol> <p>The trade-off for this (cost-)efficiency has traditionally been convenience. Instead of a simple request-response cycle, the batch workflow involves manually preparing a JSONL file, uploading it, starting the job, and then retrieving the results from a separate file. This is especially cumbersome and challenging when you need to generate prompts dynamically or make use of <a href="https://platform.openai.com/docs/guides/structured-outputs">structured outputs</a>.</p> <h2 id="convenient-batch-processing-with-openbatch">Convenient Batch Processing with <code class="language-plaintext highlighter-rouge">openbatch</code></h2> <p><code class="language-plaintext highlighter-rouge">openbatch</code> is a lightweight Python library that simplifies the creation of the batch input file by providing a developer experience that mirrors the official <code class="language-plaintext highlighter-rouge">openai</code> Python client. It’s designed to be a near drop-in replacement that can integrate into existing workflows, allowing you to switch between sequential and batch processing with minimal code changes.</p> <p>The library’s core features directly address the common pain points of the batch workflow:</p> <ul> <li><strong>Familiar API</strong>: The <code class="language-plaintext highlighter-rouge">BatchCollector</code> class mimics the structure of <code class="language-plaintext highlighter-rouge">openai.OpenAI</code>, so you can write <code class="language-plaintext highlighter-rouge">collector.responses.create(...)</code> instead of <code class="language-plaintext highlighter-rouge">client.responses.create(...)</code>.</li> <li><strong>Structured Outputs with Pydantic</strong>: Reliably getting JSON output from LLMs can be tricky. <code class="language-plaintext highlighter-rouge">openbatch</code> allows you to pass a Pydantic model directly to a <code class="language-plaintext highlighter-rouge">parse()</code> method (e.g., <code class="language-plaintext highlighter-rouge">collector.responses.parse(text_format=MyModel)</code>), which automatically handles the complex JSON schema generation needed to enforce the output structure.</li> <li><strong>Powerful Templating</strong>: With the <code class="language-plaintext highlighter-rouge">BatchJobManager</code>, you can define a <code class="language-plaintext highlighter-rouge">PromptTemplate</code> with placeholders and programmatically generate thousands or millions of requests from a list of data, which is ideal for large-scale, repetitive tasks.</li> <li><strong>Full API Coverage</strong>: It supports all endpoints available in the Batch API: <code class="language-plaintext highlighter-rouge">/v1/responses</code>, <code class="language-plaintext highlighter-rouge">/v1/chat/completions</code>, and <code class="language-plaintext highlighter-rouge">/v1/embeddings</code>.</li> </ul> <p>Have a look at the full documentation at <a href="https://daniel-gomm.github.io/openbatch">https://daniel-gomm.github.io/openbatch</a> for more details and how-to guides.</p> <h3 id="installation">Installation</h3> <p>You can install <code class="language-plaintext highlighter-rouge">openbatch</code> via pip:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>openbatch
</code></pre></div></div> <h3 id="a-practical-workflow-sentiment-analysis-at-scale">A Practical Workflow: Sentiment Analysis at Scale</h3> <p>To understand the value of <code class="language-plaintext highlighter-rouge">openbatch</code>, let’s walk through a common, real-world task: performing sentiment analysis on a large dataset of customer reviews. Imagine you have a file, <code class="language-plaintext highlighter-rouge">customer_reviews.csv</code>, containing thousands of reviews that you need to classify.</p> <p>The goal is to get a structured output for each review, classifying it as ‘Positive’, ‘Neutral’, or ‘Negative’ with a confidence score. We’ll start with a standard sequential approach and then see how <code class="language-plaintext highlighter-rouge">openbatch</code> dramatically simplifies the process for batching.</p> <p>First, let’s define the Pydantic model that will enforce our desired output structure:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span><span class="p">,</span> <span class="n">Field</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Literal</span>

<span class="k">class</span> <span class="nc">SentimentAnalysisModel</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">sentiment</span><span class="p">:</span> <span class="n">Literal</span><span class="p">[</span><span class="sh">"</span><span class="s">Positive</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Neutral</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Negative</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">confidence</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(</span>
        <span class="n">ge</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span> 
        <span class="n">le</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span> 
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Confidence score for the sentiment classification.</span><span class="sh">"</span>
    <span class="p">)</span>
</code></pre></div></div> <p>Now, let’s assume our <code class="language-plaintext highlighter-rouge">customer_reviews.csv</code> looks like this:</p> <table> <thead> <tr> <th>review_id</th> <th>review_text</th> </tr> </thead> <tbody> <tr> <td>a-123</td> <td>The product is absolutely fantastic!</td> </tr> <tr> <td>b-456</td> <td>It broke after just one week of use.</td> </tr> <tr> <td>c-789</td> <td>The packaging was okay.</td> </tr> <tr> <td>…</td> <td><em>(thousands more rows)</em></td> </tr> </tbody> </table> <h4 id="approach-1-the-standard-sequential-loop">Approach 1: The Standard Sequential Loop</h4> <p>A typical approach would be to loop through the dataset and make an API call for each review. This is easy to write but highly inefficient for large datasets.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">csv</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">()</span>
<span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">instructions</span> <span class="o">=</span> <span class="sh">"</span><span class="s">You are an expert annotator. Judge the sentiment of the user-provided comment. Use the categories </span><span class="sh">'</span><span class="s">Positive</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">Neutral</span><span class="sh">'</span><span class="s">, and </span><span class="sh">'</span><span class="s">Negative</span><span class="sh">'</span><span class="s">.</span><span class="sh">"</span>

<span class="c1"># This loop is slow and expensive at scale
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Starting sequential processing...</span><span class="sh">"</span><span class="p">)</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">customer_reviews.csv</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">reader</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="nc">DictReader</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">reader</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">instructions</span><span class="o">=</span><span class="n">instructions</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="sh">"</span><span class="s">review_text</span><span class="sh">"</span><span class="p">]}],</span>
            <span class="n">text_format</span><span class="o">=</span><span class="n">SentimentAnalysisModel</span>
        <span class="p">)</span>
        <span class="n">results</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">review_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="sh">"</span><span class="s">review_id</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">analysis</span><span class="sh">"</span><span class="p">:</span> <span class="n">response</span><span class="p">})</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Processed review </span><span class="si">{</span><span class="n">row</span><span class="p">[</span><span class="sh">'</span><span class="s">review_id</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">✅ Sequential processing complete.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>This method is simple but has major drawbacks: it’s <strong>slow</strong>, processing one review at a time, and <strong>expensive</strong>, as it uses standard API pricing.</p> <h4 id="approach-2-the-batchcollector-drop-in-replacement">Approach 2: The <code class="language-plaintext highlighter-rouge">BatchCollector</code> Drop-in Replacement</h4> <p>Here’s where <code class="language-plaintext highlighter-rouge">openbatch</code> comes in. You can switch to batch processing with minimal changes. The <code class="language-plaintext highlighter-rouge">BatchCollector</code> API is designed to be a <strong>drop-in replacement</strong> for the <code class="language-plaintext highlighter-rouge">OpenAI</code> client within your existing loop.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">csv</span>
<span class="kn">from</span> <span class="n">openbatch</span> <span class="kn">import</span> <span class="n">BatchCollector</span>

<span class="n">batch_file_path</span> <span class="o">=</span> <span class="sh">"</span><span class="s">sentiment_batch.jsonl</span><span class="sh">"</span>
<span class="n">collector</span> <span class="o">=</span> <span class="nc">BatchCollector</span><span class="p">(</span><span class="n">batch_file_path</span><span class="o">=</span><span class="n">batch_file_path</span><span class="p">)</span> <span class="c1"># Change 1: Instantiate collector
</span><span class="n">instructions</span> <span class="o">=</span> <span class="sh">"</span><span class="s">You are an expert annotator. Judge the sentiment of the user-provided comment. Use the categories </span><span class="sh">'</span><span class="s">Positive</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">Neutral</span><span class="sh">'</span><span class="s">, and </span><span class="sh">'</span><span class="s">Negative</span><span class="sh">'</span><span class="s">.</span><span class="sh">"</span>

<span class="c1"># The same loop, now preparing a batch file instead of making live calls
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Preparing batch file with BatchCollector...</span><span class="sh">"</span><span class="p">)</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">customer_reviews.csv</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">reader</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="nc">DictReader</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">reader</span><span class="p">:</span>
        <span class="c1"># Change 2: Call the collector instead of the client
</span>        <span class="n">collector</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
            <span class="n">custom_id</span><span class="o">=</span><span class="n">row</span><span class="p">[</span><span class="sh">"</span><span class="s">review_id</span><span class="sh">"</span><span class="p">],</span> <span class="c1"># Add a custom ID for tracking
</span>            <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">instructions</span><span class="o">=</span><span class="n">instructions</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="sh">"</span><span class="s">review_text</span><span class="sh">"</span><span class="p">]}],</span>
            <span class="n">text_format</span><span class="o">=</span><span class="n">SentimentAnalysisModel</span>
        <span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">✅ Batch file </span><span class="sh">'</span><span class="si">{</span><span class="n">batch_file_path</span><span class="si">}</span><span class="sh">'</span><span class="s"> prepared.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>With just two lines changed, your code now prepares a cost-effective batch job instead of making slow, expensive API calls. You’ve decoupled file preparation from execution.</p> <h4 id="approach-3-the-simplified-batchjobmanager">Approach 3: The Simplified <code class="language-plaintext highlighter-rouge">BatchJobManager</code></h4> <p>For templated, large-scale tasks like this, the <code class="language-plaintext highlighter-rouge">BatchJobManager</code> is even more efficient. It eliminates the need for an explicit Python loop entirely, letting you define the task and the data separately.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">csv</span>
<span class="kn">from</span> <span class="n">openbatch</span> <span class="kn">import</span> <span class="n">BatchJobManager</span><span class="p">,</span> <span class="n">PromptTemplate</span><span class="p">,</span> <span class="n">Message</span><span class="p">,</span> <span class="n">ResponsesRequest</span><span class="p">,</span> <span class="n">PromptTemplateInputInstance</span>

<span class="c1"># 1. Define the prompt template
</span><span class="n">template</span> <span class="o">=</span> <span class="nc">PromptTemplate</span><span class="p">(</span><span class="n">messages</span><span class="o">=</span><span class="p">[</span>
    <span class="nc">Message</span><span class="p">(</span><span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="n">content</span><span class="o">=</span><span class="sh">"</span><span class="s">You are an expert annotator. Judge the sentiment of the user-provided comment. Use the categories </span><span class="sh">'</span><span class="s">Positive</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">Neutral</span><span class="sh">'</span><span class="s">, and </span><span class="sh">'</span><span class="s">Negative</span><span class="sh">'</span><span class="s">.</span><span class="sh">"</span><span class="p">),</span>
    <span class="nc">Message</span><span class="p">(</span><span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="n">content</span><span class="o">=</span><span class="sh">"</span><span class="s">{review_text}</span><span class="sh">"</span><span class="p">)</span>
<span class="p">])</span>

<span class="c1"># 2. Define the common request configuration
</span><span class="n">common_config</span> <span class="o">=</span> <span class="nc">ResponsesRequest</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">)</span>
<span class="c1"># Enforce the structured output for all requests in this batch
</span><span class="n">common_config</span><span class="p">.</span><span class="nf">set_output_structure</span><span class="p">(</span><span class="n">SentimentAnalysisModel</span><span class="p">)</span>

<span class="c1"># 3. Load the data and create input instances (no loop needed for API calls)
</span><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">customer_reviews.csv</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">reader</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="nc">DictReader</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">input_instances</span> <span class="o">=</span> <span class="p">[</span>
        <span class="nc">PromptTemplateInputInstance</span><span class="p">(</span>
            <span class="nb">id</span><span class="o">=</span><span class="n">row</span><span class="p">[</span><span class="sh">"</span><span class="s">review_id</span><span class="sh">"</span><span class="p">],</span>
            <span class="n">prompt_value_mapping</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">review_text</span><span class="sh">"</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="sh">"</span><span class="s">review_text</span><span class="sh">"</span><span class="p">]}</span>
        <span class="p">)</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">reader</span>
    <span class="p">]</span>

<span class="c1"># 4. Generate the entire batch file in one go
</span><span class="n">batch_file_path</span> <span class="o">=</span> <span class="sh">"</span><span class="s">sentiment_batch_optimized.jsonl</span><span class="sh">"</span>
<span class="n">manager</span> <span class="o">=</span> <span class="nc">BatchJobManager</span><span class="p">()</span>
<span class="n">manager</span><span class="p">.</span><span class="nf">add_templated_instances</span><span class="p">(</span>
    <span class="n">prompt</span><span class="o">=</span><span class="n">template</span><span class="p">,</span>
    <span class="n">common_request</span><span class="o">=</span><span class="n">common_config</span><span class="p">,</span>
    <span class="n">input_instances</span><span class="o">=</span><span class="n">input_instances</span><span class="p">,</span>
    <span class="n">save_file_path</span><span class="o">=</span><span class="n">batch_file_path</span>
<span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Batch file </span><span class="sh">'</span><span class="si">{</span><span class="n">batch_file_path</span><span class="si">}</span><span class="sh">'</span><span class="s"> generated with BatchJobManager.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>This approach is the cleanest and most declarative, perfectly suited for large-scale, programmatic batch job creation.</p> <h4 id="creating-the-batch-job">Creating the Batch Job</h4> <p>Once the batch-job-file is created, the batch-job can be started. This is possible through the <a href="https://platform.openai.com/batches">Batches Web UI</a> or programatically via the standard <code class="language-plaintext highlighter-rouge">openai</code> client:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">()</span>

<span class="c1"># Upload the file to OpenAI
</span><span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Uploading </span><span class="sh">'</span><span class="si">{</span><span class="n">batch_file_path</span><span class="si">}</span><span class="sh">'</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>
<span class="n">batch_input_file</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">files</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="nb">file</span><span class="o">=</span><span class="nf">open</span><span class="p">(</span><span class="n">batch_file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">),</span>
    <span class="n">purpose</span><span class="o">=</span><span class="sh">"</span><span class="s">batch</span><span class="sh">"</span>
<span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">File uploaded. File ID: </span><span class="si">{</span><span class="n">batch_input_file</span><span class="p">.</span><span class="nb">id</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Create the batch job, specifying the correct endpoint
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Creating batch job...</span><span class="sh">"</span><span class="p">)</span>
<span class="n">batch_job</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">batches</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">input_file_id</span><span class="o">=</span><span class="n">batch_input_file</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
    <span class="n">endpoint</span><span class="o">=</span><span class="sh">"</span><span class="s">/v1/responses</span><span class="sh">"</span><span class="p">,</span>  <span class="c1"># Must match the API used in your requests
</span>    <span class="n">completion_window</span><span class="o">=</span><span class="sh">"</span><span class="s">24h</span><span class="sh">"</span>
<span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Batch job created. Job ID: </span><span class="si">{</span><span class="n">batch_job</span><span class="p">.</span><span class="nb">id</span><span class="si">}</span><span class="s">, Status: </span><span class="si">{</span><span class="n">batch_job</span><span class="p">.</span><span class="n">status</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <h4 id="monitor-and-download-the-results">Monitor and Download the Results</h4> <p>After some time, you can check the job’s status. Once it’s complete, you can download the output file containing the responses. This is again possible through the <a href="https://platform.openai.com/batches">Batches Web UI</a> or programatically:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># In a real application, you could poll this endpoint periodically
</span><span class="n">completed_job</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">batches</span><span class="p">.</span><span class="nf">retrieve</span><span class="p">(</span><span class="n">batch_job</span><span class="p">.</span><span class="nb">id</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Current job status: </span><span class="si">{</span><span class="n">completed_job</span><span class="p">.</span><span class="n">status</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Once the status is 'completed'
</span><span class="k">if</span> <span class="n">completed_job</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="sh">'</span><span class="s">completed</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">output_file_id</span> <span class="o">=</span> <span class="n">completed_job</span><span class="p">.</span><span class="n">output_file_id</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Job finished! Output file ID: </span><span class="si">{</span><span class="n">output_file_id</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="c1"># Download the results file
</span>    <span class="n">results_content</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">files</span><span class="p">.</span><span class="nf">content</span><span class="p">(</span><span class="n">file_id</span><span class="o">=</span><span class="n">output_file_id</span><span class="p">)</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">batch_results.jsonl</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">wb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">results_content</span><span class="p">.</span><span class="nf">read</span><span class="p">())</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">✅ Results saved to </span><span class="sh">'</span><span class="s">batch_results.jsonl</span><span class="sh">'</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">completed_job</span><span class="p">.</span><span class="n">status</span> <span class="ow">in</span> <span class="p">[</span><span class="sh">'</span><span class="s">failed</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">expired</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">cancelled</span><span class="sh">'</span><span class="p">]:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">❌ Job did not complete. Status: </span><span class="si">{</span><span class="n">completed_job</span><span class="p">.</span><span class="n">status</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>The downloaded <code class="language-plaintext highlighter-rouge">batch_results.jsonl</code> file will contain the output for each of the input requests, which can then be parsed for the application. Thanks to the structured output feature, the JSON responses for the requests will be clean, valid, and ready to be loaded directly into the Pydantic models.</p> <h2 id="conclusion">Conclusion</h2> <p>The OpenAI Batch API is a powerful tool for processing large datasets efficiently and cost-effectively. While its asynchronous nature can introduce complexity, libraries like <a href="https://daniel-gomm.github.io/openbatch"><code class="language-plaintext highlighter-rouge">openbatch</code></a> abstract away the tedious work of file preparation. By providing a familiar, Pydantic-powered interface, it makes the benefits of batch processing accessible without sacrificing developer convenience, allowing researchers and engineers to focus on their results, not their boilerplate.</p> <p>For more detail on <code class="language-plaintext highlighter-rouge">openbatch</code>, including installation instructions and comprehensive documentation, visit the <a href="https://daniel-gomm.github.io/openbatch">official documentation site</a>.</p>]]></content><author><name></name></author><category term="project"/><category term="code"/><category term="guide"/><category term="openai"/><summary type="html"><![CDATA[This post introduces `openbatch`, a Python library designed to make the powerful but often cumbersome OpenAI Batch API as convenient and easy to use as standard sequential calls.]]></summary></entry><entry><title type="html">Table Serialization Kitchen - A Recipe for Better LLM Performance on Tabular Data</title><link href="https://daniel-gomm.github.io/blog/2025/Table-Serialization-Kitchen/" rel="alternate" type="text/html" title="Table Serialization Kitchen - A Recipe for Better LLM Performance on Tabular Data"/><published>2025-03-04T00:00:00+00:00</published><updated>2025-03-04T00:00:00+00:00</updated><id>https://daniel-gomm.github.io/blog/2025/Table%20Serialization%20Kitchen</id><content type="html" xml:base="https://daniel-gomm.github.io/blog/2025/Table-Serialization-Kitchen/"><![CDATA[<blockquote> <p>TL;DR: This blog post explores the importance of table serialization on the performance of Large Language Models. We introduce the <a href="https://github.com/daniel-gomm/table-serialization-kitchen">Table Serialization Kitchen</a>, an easy-to-use open-source tool for experimenting with serialization strategies. Initial experiments in table retrieval show large performance differences between different serializations. Metadata can provide highly relevant signal and improve performance significantly. Besides this, we find that there exist no single best serialization strategy but rather that the serialization strategy has to be tailored to the embedding model. Overall, our findings suggest that by optimizing table serialization, you can significantly enhance LLM performance on tabular data.</p> </blockquote> <p>Large Language Models (LLMs) have revolutionized how we interact with data, enabling tasks like question answering, text-to-SQL generation, and more. However, these models typically require text-based inputs, which poses a challenge when working with tabular data. To apply LLMs to tables, we need to convert the structured data into a textual format—a process known as <strong>table serialization</strong>. But how do we serialize tables effectively? And does the way we serialize them impact the performance of downstream tasks?</p> <p>In this blog post, we dive into the world of table serialization for dense retrieval tasks. We’ll share our journey of experimenting with different serialization strategies, highlighting key findings and providing practical insights. Along the way, we’ll introduce the <a href="https://github.com/daniel-gomm/table-serialization-kitchen"><strong>Table Serialization Kitchen</strong></a>, an open-source tool we developed to make experimentation easier. (This project was presented at the <a href="https://sites.google.com/view/rl-and-gm-for-sd">ELLIS workshop on Representation Learning and Generative Models for Structured Data 2025</a>. Find our extended abstract <a href="https://openreview.net/forum?id=rELWIvq2Qy">“Metadata Matters in Dense Table Retrieval” here</a>)</p> <h2 id="the-challenge-of-table-serialization">The Challenge of Table Serialization</h2> <p>Let’s start with an example. Consider the following table from the FeTaQA<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">1</a></sup> dataset:</p> <table> <thead> <tr> <th>Year</th> <th>Title</th> <th>Role</th> </tr> </thead> <tbody> <tr> <td>2012</td> <td>From the Rough</td> <td>Edward</td> </tr> <tr> <td>1997</td> <td>The Borrowers</td> <td>Peagreen Clock</td> </tr> <tr> <td>2013</td> <td>In Secret</td> <td>Camille Raquin</td> </tr> <tr> <td>2004</td> <td>Harry Potter and the Prisoner of Azkaban</td> <td>Draco Malfoy</td> </tr> <tr> <td>2017</td> <td>Feed</td> <td>Matt Grey</td> </tr> </tbody> </table> <p>This table is also associated with metadata:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"table_page_title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tom Felton"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"table_section_title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Films"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>To use this table with an LLM, we need to convert it into a textual format. One possible serialization might look like this:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Metadata:
table_page_title: Tom Felton
table_section_title: Films

Table:
| Year | Title          | Role           |
|------|----------------|----------------|
| 2012 | From the Rough | Edward         |
| 1997 | The Borrowers  | Peagreen Clock |
| 2013 | In Secret      | Camille Raquin |
</code></pre></div></div> <p>This representation includes both the table’s content and its metadata, formatted in Markdown. But is this the best way to serialize the table? Should we include all the rows, or just a subset? How can select such a subset of rows? What about the metadata—is it helpful, or just noise? And how does the format (e.g., Markdown vs. JSON) affect the results?</p> <p>These questions highlight the complexity of table serialization. There are countless design choices to make, and it’s not immediately clear which ones lead to better performance. To answer these questions, we turned to experimentation.</p> <h2 id="setting-up-experiments-with-table-serialization-kitchen-and-target">Setting up experiments with Table Serialization Kitchen and TARGET</h2> <p>To systematically explore the design space of table serialization, we developed the <a href="https://github.com/daniel-gomm/table-serialization-kitchen"><strong>Table Serialization Kitchen</strong></a>—a Python package that makes it easy to define, test, and compare different serialization strategies. The package integrates with the <a href="https://target-benchmark.github.io/">TARGET benchmark</a><sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>, allowing us to evaluate serialization methods for table retrieval on real-world datasets like FeTaQA<sup id="fnref:4:1" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">1</a></sup>, OTTQA<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>, Spider<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">4</a></sup>, and BIRD<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">5</a></sup>.</p> <p>To follow along this blog post, install <a href="https://github.com/daniel-gomm/table-serialization-kitchen">Table Serialization Kitchen</a> with the TARGET integration:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>tableserializer[target]
</code></pre></div></div> <p>Since there are so many parameters to explore, and the number of experiments scales exponentially with the number of parameters varied, we fix the row sampling strategy to random selection and we do not perform any preprocessing of the data in the tables. Besides that we explore the following parameter configurations:</p> <ul> <li>Recipes (Serialization templates): We evaluate two serialization templates, one that only data from the raw table itself, and one that also leaves room for metadata.</li> <li>Raw table serialization: We compare serializing raw table contents as row-wise JSON and in markdown format.</li> <li>Row sampling: We investigate the impact of varying the number of rows sampled for the serialization in a range of 1-30 sampled rows.</li> </ul> <p>Table serialization kitchen makes creating configurations for all of these settings straight forward:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">tableserializer.kitchen</span> <span class="kn">import</span> <span class="n">ExperimentalSerializerKitchen</span>
<span class="kn">from</span> <span class="n">tableserializer.serializer.table</span> <span class="kn">import</span> <span class="n">MarkdownRawTableSerializer</span><span class="p">,</span> <span class="n">JSONRawTableSerializer</span>
<span class="kn">from</span> <span class="n">tableserializer.serializer.metadata</span> <span class="kn">import</span> <span class="n">PairwiseMetadataSerializer</span>
<span class="kn">from</span> <span class="n">tableserializer.table.row_sampler</span> <span class="kn">import</span> <span class="n">RandomRowSampler</span>
<span class="kn">from</span> <span class="n">tableserializer</span> <span class="kn">import</span> <span class="n">SerializationRecipe</span>


<span class="c1"># Define all the different configurations of components to use in the experiments
</span>
<span class="c1"># Recipes define the general structure of the output
</span><span class="n">recipes</span> <span class="o">=</span> <span class="p">[</span><span class="nc">SerializationRecipe</span><span class="p">(</span><span class="sh">"</span><span class="s">Metadata:</span><span class="se">\n</span><span class="s">{META}</span><span class="se">\n\n</span><span class="s">Table:</span><span class="se">\n</span><span class="s">{TABLE}</span><span class="sh">"</span><span class="p">),</span>
           <span class="nc">SerializationRecipe</span><span class="p">(</span><span class="sh">"</span><span class="s">Table:</span><span class="se">\n</span><span class="s">{TABLE}</span><span class="sh">"</span><span class="p">)]</span>

<span class="c1"># Metadata serializers define how metadata is parsed and serialized
</span><span class="n">metadata_serializers</span> <span class="o">=</span> <span class="p">[</span><span class="nc">PairwiseMetadataSerializer</span><span class="p">()]</span>

<span class="c1"># Raw table serializers define how raw tables are serialized
</span><span class="n">raw_table_serializers</span> <span class="o">=</span> <span class="p">[</span><span class="nc">MarkdownRawTableSerializer</span><span class="p">(),</span> <span class="nc">JSONRawTableSerializer</span><span class="p">()]</span>

<span class="c1"># Row samplers define how and how many rows are sampled for the raw table serialization
# Here we just use random row samplers, sampling 1-30 rows
</span><span class="n">row_samplers</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span> <span class="o">+</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="o">+</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">5</span><span class="p">)):</span>
    <span class="n">row_samplers</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">RandomRowSampler</span><span class="p">(</span><span class="n">rows_to_sample</span><span class="o">=</span><span class="n">i</span><span class="p">))</span>

<span class="c1"># The experimental serializer kitchen is used to manage table serializers for experimentation
</span><span class="n">kitchen</span> <span class="o">=</span> <span class="nc">ExperimentalSerializerKitchen</span><span class="p">()</span>

<span class="c1"># Create an array of serializers with different configurations (grid-search-style combination of all parameters)
</span><span class="n">serializers</span> <span class="o">=</span> <span class="n">kitchen</span><span class="p">.</span><span class="nf">create_serializers</span><span class="p">(</span><span class="n">recipes</span><span class="o">=</span><span class="n">recipes</span><span class="p">,</span>
                                         <span class="n">schema_serializers</span><span class="o">=</span><span class="p">[],</span>
                                         <span class="n">metadata_serializers</span><span class="o">=</span><span class="n">metadata_serializers</span><span class="p">,</span>
                                         <span class="n">table_serializers</span><span class="o">=</span><span class="n">raw_table_serializers</span><span class="p">,</span>
                                         <span class="n">row_samplers</span><span class="o">=</span><span class="n">row_samplers</span><span class="p">,</span>
                                         <span class="n">table_preprocessor_constellations</span><span class="o">=</span><span class="p">[[]])</span>

<span class="c1"># Save the serializers in a folder structure
</span><span class="n">kitchen</span><span class="p">.</span><span class="nf">save_serializer_experiment_configurations</span><span class="p">(</span><span class="n">serializers</span><span class="p">,</span> <span class="sh">"</span><span class="s">./retrieval_experiments</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>This creates a folder structure that contains the configurations for all the different combinations of parameters. We can now run these experiments on a dataset (FeTaQA<sup id="fnref:4:2" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">1</a></sup> in this case) using the TARGET integration into table serializer kitchen:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">tableserializer.integrations.target</span> <span class="kn">import</span> <span class="n">TARGETOpenAIExperimentExecutor</span>
<span class="kn">from</span> <span class="n">tableserializer.kitchen</span> <span class="kn">import</span> <span class="n">ExperimentalSerializerKitchen</span>

<span class="c1"># Create experiment executor that can run a TARGET experiment
</span><span class="n">experiment_executor</span> <span class="o">=</span> <span class="nc">TARGETOpenAIExperimentExecutor</span><span class="p">(</span><span class="sh">"</span><span class="s">INSERT_API_KEY_HERE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">fetaqa</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">test</span><span class="sh">"</span><span class="p">,</span>
                                                     <span class="n">embedding_cache_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">./retrieval_experiments/.cache</span><span class="sh">"</span><span class="p">)</span>

<span class="n">kitchen</span> <span class="o">=</span> <span class="nc">ExperimentalSerializerKitchen</span><span class="p">()</span>

<span class="c1"># Run all experiments in the directory
</span><span class="n">kitchen</span><span class="p">.</span><span class="nf">run_experiments_with_serializers</span><span class="p">(</span><span class="n">base_folder</span><span class="o">=</span><span class="sh">"</span><span class="s">./retrieval_experiments</span><span class="sh">"</span><span class="p">,</span>
                                         <span class="n">experiment_callback</span><span class="o">=</span><span class="n">experiment_executor</span><span class="p">.</span><span class="n">run_experiment</span><span class="p">)</span>
</code></pre></div></div> <h2 id="how-to-serialize-tables-for-table-retrieval">How to serialize tables for table retrieval?</h2> <p>We use TARGET<sup id="fnref:2:1" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> to benchmark table retrieval with the different serializers. TARGET provide a unified interface to run table retrieval benchmarks on datasets from different tasks like TabularQA (e.g., FeTaQA<sup id="fnref:4:3" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">1</a></sup>, OTTQA<sup id="fnref:3:1" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>) or Text-to-SQL (Spider<sup id="fnref:5:1" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">4</a></sup>, BIRD<sup id="fnref:6:1" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">5</a></sup>). These experiments show large deviations in retrieval performance depending on how the serializations are constructed.</p> <h3 id="metadata-matters">Metadata Matters</h3> <p>One of the most striking results from our experiments is the significant impact of including contextual metadata in the table serialization. In the FeTaQA<sup id="fnref:4:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">1</a></sup> dataset, tables are associated with page and section titles as metadata. When this metadata is included in the serialized representation, retrieval performance improves substantially.</p> <p>For example, as shown in the plots below, including metadata increases the average recall@3 by <strong>0.42</strong>. This demonstrates that contextualizing tables with relevant metadata is crucial for effective retrieval. The metadata provides additional context that helps the embedding models better understand the relevance of the table to a given query.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/fetaqa_results-480.webp 480w,/assets/img/blog/fetaqa_results-800.webp 800w,/assets/img/blog/fetaqa_results-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/fetaqa_results.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Results of retrieval experiments on the FeTaQA<sup id="fnref:4:5" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">1</a></sup> dataset. The number of row samples included in the serialization is shown on the x-axis, the y-axis shows the retrieval performance measured by recall@3.</p> <h3 id="row-count-counts">Row count counts</h3> <p>The number of rows included in the serialization has a large impact on the retrieval performance. In settings where no metadata is included, embedding more rows generally improves retrieval performance, but with diminishing returns. Most models show little improvement when including more than 10 rows.</p> <p>Looking at the setting with metadata shows stark differences between embedding models. For some long-context embedding models like <em>gte-large-en-v1.5</em>, retrieval performance continues to improve as more rows are included. This suggests that these models are well equipped to handle larger inputs and can leverage the additional information provided by more rows. Less capable embedding models like <em>jina-embeddings-v2-base-en</em> show deteriorating retrieval performance with more rows, suggesting a loss of contextual information in the embeddings.</p> <p>This highlights the importance of carefully selecting the number of rows to include in the serialization, depending on the capabilities of the embedding model being used.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/ottqa_recall_vs_row_count_no-context_json-480.webp 480w,/assets/img/blog/ottqa_recall_vs_row_count_no-context_json-800.webp 800w,/assets/img/blog/ottqa_recall_vs_row_count_no-context_json-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/ottqa_recall_vs_row_count_no-context_json.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Experimental results on the OTTQA<sup id="fnref:3:2" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup> dataset.</p> <h3 id="not-all-embedding-models-are-created-equal">Not all embedding models are created equal</h3> <p>Our experiments also reveal that different embedding models exhibit varying sensitivities to the serialization parameters. For instance, stronger models like <em>gte-large-en-v1.5</em> perform well when combining a small sample of rows with meaningful metadata, while other models like <em>jina-embeddings-v2-base</em> struggle with this combination.</p> <p>This sensitivity to serialization parameters is highly model-dependent, and there is no single “best” parameter combination that generalizes across all models. Achieving the best performance requires thorough experimentation with each embedding model to identify the optimal serialization strategy.</p> <p>For example, the plots above show how different models respond to the inclusion of metadata and varying row counts. Some models benefit from adding rows alongside metadata, while others show performance degradation, suggesting a loss of contextual information in the embeddings.</p> <h3 id="conclusion">Conclusion</h3> <p>Our experiments demonstrate that the design of table serializations has a significant impact on retrieval performance. Including contextual metadata, carefully selecting the number of rows, and tailoring the serialization strategy to the specific embedding model are all critical factors in achieving optimal results. Additionally, context-length constraints need to be taken into consideration. While we take a first step in exploring table serialization through our experiments, further research in this area is needed.</p> <p>We encourage researchers and practitioners to experiment with different serialization methods using the <a href="https://github.com/daniel-gomm/table-serialization-kitchen">Table Serialization Kitchen</a> package to identify the best approach for their specific use case. By doing so, you can unlock the full potential of LLMs for tasks involving tabular data.</p> <p>Happy experimenting!</p> <hr/> <p>If you find this project useful, please cite it as:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@inproceedings{
    gomm2025metadata,
    title={Metadata Matters in Dense Table Retrieval},
    author={Daniel Gomm and Madelon Hulsebos},
    booktitle={ELLIS workshop on Representation Learning and Generative Models for Structured Data},
    year={2025},
    url={https://openreview.net/forum?id=rELWIvq2Qy},
    pdf={https://openreview.net/pdf?id=rELWIvq2Qy}
}
</code></pre></div></div> <p><strong>References:</strong></p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:4" role="doc-endnote"> <p>Nan, L., et al. “<a href="https://aclanthology.org/2022.tacl-1.3/">FeTaQA: Free-form Table Question Answering</a>” in <em>Transactions of the Association for Computational Linguistics</em>, vol. 10, pp. 35–49, 2022. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:4:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a> <a href="#fnref:4:2" class="reversefootnote" role="doc-backlink">&#8617;<sup>3</sup></a> <a href="#fnref:4:3" class="reversefootnote" role="doc-backlink">&#8617;<sup>4</sup></a> <a href="#fnref:4:4" class="reversefootnote" role="doc-backlink">&#8617;<sup>5</sup></a> <a href="#fnref:4:5" class="reversefootnote" role="doc-backlink">&#8617;<sup>6</sup></a></p> </li> <li id="fn:2" role="doc-endnote"> <p>X. Ji, A. Parameswaran, M. Hulsebos, “<a href="https://target-benchmark.github.io/">TARGET: Benchmarking Table Retrieval for Generative Tasks</a>,” in <em>NeurIPS 2024 Third Table Representation Learning Workshop</em>, 2024. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:2:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p> </li> <li id="fn:3" role="doc-endnote"> <p>W. Chen, et al, “<a href="https://openreview.net/forum?id=MmCRswl1UYl">Open Question Answering over Tables and Text</a>,” in <em>International Conference on Learning Representations</em>, 2021. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:3:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a> <a href="#fnref:3:2" class="reversefootnote" role="doc-backlink">&#8617;<sup>3</sup></a></p> </li> <li id="fn:5" role="doc-endnote"> <p>Yu, T., et al, “<a href="https://aclanthology.org/D18-1425/">Spider: A Large-Scale Human-Labeled Dataset for Complex and Cross-Domain Semantic Parsing and Text-to-SQL Task</a>,” in <em>Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing</em>, 2018, pp. 3911–3921. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:5:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p> </li> <li id="fn:6" role="doc-endnote"> <p>Li, J., et al, “<a href="https://dl.acm.org/doi/abs/10.5555/3666122.3667957">Can LLM already serve as a database interface? a big bench for large-scale database grounded text-to-SQLs</a>,” in <em>Proceedings of the 37th International Conference on Neural Information Processing Systems</em>, 2023. <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:6:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p> </li> </ol> </div>]]></content><author><name></name></author><category term="project"/><category term="trl"/><category term="retrieval"/><category term="code"/><category term="guide"/><summary type="html"><![CDATA[This blog post explores table serializations and their impact on downstream tasks using the Table Serialization Kitchen.]]></summary></entry></feed>